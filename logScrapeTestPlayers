const { text } = require("express");
const puppeteer = require("puppeteer");

(async () => {
  try {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(
      "https://www.pokernow.club/games/pglPG8z9-28wCrb8Q33bZBY7r"
    );

    // Add your actions here
    let testName = "rbd";
    const actionType = await page.evaluate(async (testName) => {
      const logButtonTag = document.querySelector(
        ".button-1.show-log-button.small-button.dark-gray"
      );

      logButtonTag.click();

      // Add a 1-second delay
      await new Promise((resolve) => setTimeout(resolve, 500));

      const textLogTag = document.querySelector(
        ".modal-overlay .log-modal-body .log-modal-entries"
      );

      // Get the first 10 child nodes
      const firstTenChildNodes = Array.from(textLogTag.childNodes).slice(0, 10);

      // Create an array from the innerText of the <p class="content"> tag in each child node from Log
      const textArray = firstTenChildNodes.map((node) => {
        const pTag = node.querySelector("p.content");
        return pTag ? pTag.innerText : "";
      });

      const passedInPlayerName = testName;

      let tLength = textArray.length;

      for (let i = 0; i < tLength; i++) {
        const actionLogText = textArray.at(i);
        const tokensFromPlayeraction = actionLogText.split(" ");
        const scrapedPlayerName = tokensFromPlayeraction[0];
        if (scrapedPlayerName === passedInPlayerName) {
          let actionType = "N/A";
          if (actionLogText.includes("calls")) {
            actionType = "call";
          } else if (actionLogText.includes("bets")) {
            actionType = "bet";
          } else if (actionLogText.includes("raises to")) {
            actionType = "raise";
          } else if (actionLogText.includes("posts a")) {
            actionType = "blind";
          }

          return {
            index: i,
            name: scrapedPlayerName,
            actionType: actionType,
          };
        }
      }

      return "Couldn't find player";
    }, testName);

    console.log(actionType);
    await browser.close();
  } catch (error) {
    console.error("An error occurred:", error);
  }
})();
